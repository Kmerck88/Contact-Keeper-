{"ast":null,"code":"const express = require('express');\n\nconst router = express.Router();\n\nconst auth = require('../middleware/auth');\n\nconst {\n  check,\n  validationResult\n} = require('express-validator');\n\nconst User = require('../models/User');\n\nconst Contact = require('../models/Contact'); //@route    GET api/contacts\n//@desc     Get all users contacts\n//@access   Private\n\n\nrouter.get('/', auth, async (req, res) => {\n  try {\n    const contacts = await Contact.find({\n      user: req.user.id\n    }).sort({\n      date: -1\n    });\n    res.json(contacts);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); //@route    POST api/contacts\n//@desc     Add new contact\n//@access   Private\n\nrouter.post('/', [auth, [check('name', 'Name is required').not().isEmpty()]], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  const {\n    name,\n    email,\n    phone,\n    type\n  } = req.body;\n\n  try {\n    const newContact = new Contact({\n      name,\n      email,\n      phone,\n      type,\n      user: req.user.id\n    });\n    const contact = await newContact.save();\n    res.json(contact);\n  } catch (error) {\n    res.status(500).send('Server Error');\n  }\n}); //@route    PUT api/contacts/:id\n//@desc     Update contact\n//@access   Private\n\nrouter.put('/:id', (req, res) => {\n  res.send('Update contacts');\n}); //@route    DELETE api/contacts/:id\n//@desc     Delete contact\n//@access   Private\n\nrouter.delete('/:id', (req, res) => {\n  res.send('Delete contacts');\n});\nmodule.exports = router;","map":{"version":3,"sources":["C:/Users/kevin/Documents/Web Development Projects/Contact-Keeper-/routes/contacts.js"],"names":["express","require","router","Router","auth","check","validationResult","User","Contact","get","req","res","contacts","find","user","id","sort","date","json","err","console","error","message","status","send","post","not","isEmpty","errors","array","name","email","phone","type","body","newContact","contact","save","put","delete","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAR,EAAf;;AACA,MAAMC,IAAI,GAAGH,OAAO,CAAC,oBAAD,CAApB;;AACA,MAAM;AAAEI,EAAAA,KAAF;AAASC,EAAAA;AAAT,IAA8BL,OAAO,CAAC,mBAAD,CAA3C;;AAEA,MAAMM,IAAI,GAAGN,OAAO,CAAC,gBAAD,CAApB;;AACA,MAAMO,OAAO,GAAGP,OAAO,CAAC,mBAAD,CAAvB,C,CAEA;AACA;AACA;;;AACAC,MAAM,CAACO,GAAP,CAAW,GAAX,EAAgBL,IAAhB,EAAsB,OAAOM,GAAP,EAAYC,GAAZ,KAAoB;AACxC,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,IAAR,CAAa;AAAEC,MAAAA,IAAI,EAAEJ,GAAG,CAACI,IAAJ,CAASC;AAAjB,KAAb,EAAoCC,IAApC,CAAyC;AAC9DC,MAAAA,IAAI,EAAE,CAAC;AADuD,KAAzC,CAAvB;AAGAN,IAAAA,GAAG,CAACO,IAAJ,CAASN,QAAT;AACD,GALD,CAKE,OAAOO,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,OAAlB;AACAX,IAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,cAArB;AACD;AACF,CAVD,E,CAYA;AACA;AACA;;AACAtB,MAAM,CAACuB,IAAP,CACE,GADF,EAEA,CACErB,IADF,EAEE,CACEC,KAAK,CAAC,MAAD,EAAS,kBAAT,CAAL,CACGqB,GADH,GAEGC,OAFH,EADF,CAFF,CAFA,EAUC,OAAMjB,GAAN,EAAWC,GAAX,KAAmB;AAClB,QAAMiB,MAAM,GAAGtB,gBAAgB,CAACI,GAAD,CAA/B;;AACA,MAAI,CAACkB,MAAM,CAACD,OAAP,EAAL,EAAuB;AACrB,WAAOhB,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBL,IAAhB,CAAqB;AAAEU,MAAAA,MAAM,EAAEA,MAAM,CAACC,KAAP;AAAV,KAArB,CAAP;AACD;;AAED,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA,KAAP;AAAcC,IAAAA,KAAd;AAAqBC,IAAAA;AAArB,MAA6BvB,GAAG,CAACwB,IAAvC;;AAEA,MAAI;AACF,UAAMC,UAAU,GAAG,IAAI3B,OAAJ,CAAa;AAC9BsB,MAAAA,IAD8B;AAE9BC,MAAAA,KAF8B;AAG9BC,MAAAA,KAH8B;AAI9BC,MAAAA,IAJ8B;AAK9BnB,MAAAA,IAAI,EAAEJ,GAAG,CAACI,IAAJ,CAASC;AALe,KAAb,CAAnB;AAQA,UAAMqB,OAAO,GAAG,MAAMD,UAAU,CAACE,IAAX,EAAtB;AAEA1B,IAAAA,GAAG,CAACO,IAAJ,CAASkB,OAAT;AACD,GAZD,CAYE,OAAOf,KAAP,EAAc;AACdV,IAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,cAArB;AACD;AAED,CAlCF,E,CAqCA;AACA;AACA;;AACAtB,MAAM,CAACoC,GAAP,CAAW,MAAX,EAAmB,CAAC5B,GAAD,EAAMC,GAAN,KAAc;AAC/BA,EAAAA,GAAG,CAACa,IAAJ,CAAS,iBAAT;AACD,CAFD,E,CAIA;AACA;AACA;;AACAtB,MAAM,CAACqC,MAAP,CAAc,MAAd,EAAsB,CAAC7B,GAAD,EAAMC,GAAN,KAAc;AAClCA,EAAAA,GAAG,CAACa,IAAJ,CAAS,iBAAT;AACD,CAFD;AAIAgB,MAAM,CAACC,OAAP,GAAiBvC,MAAjB","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst auth = require('../middleware/auth');\r\nconst { check, validationResult } = require('express-validator');\r\n\r\nconst User = require('../models/User');\r\nconst Contact = require('../models/Contact');\r\n\r\n//@route    GET api/contacts\r\n//@desc     Get all users contacts\r\n//@access   Private\r\nrouter.get('/', auth, async (req, res) => {\r\n  try {\r\n    const contacts = await Contact.find({ user: req.user.id }).sort({\r\n      date: -1\r\n    });\r\n    res.json(contacts);\r\n  } catch (err) {\r\n    console.error(err.message);\r\n    res.status(500).send('Server Error');\r\n  }\r\n});\r\n\r\n//@route    POST api/contacts\r\n//@desc     Add new contact\r\n//@access   Private\r\nrouter.post(\r\n  '/', \r\n[\r\n  auth,\r\n  [\r\n    check('name', 'Name is required')\r\n      .not()\r\n      .isEmpty()\r\n  ]\r\n], \r\n async(req, res) => {\r\n  const errors = validationResult(req);\r\n  if (!errors.isEmpty()) {\r\n    return res.status(400).json({ errors: errors.array() });\r\n  }\r\n\r\n  const {name, email, phone, type} = req.body; \r\n\r\n  try {\r\n    const newContact = new Contact ({\r\n      name,\r\n      email,\r\n      phone,\r\n      type,\r\n      user: req.user.id \r\n    }); \r\n\r\n    const contact = await newContact.save();\r\n\r\n    res.json(contact); \r\n  } catch (error) {\r\n    res.status(500).send('Server Error');\r\n  }\r\n\r\n }\r\n);\r\n\r\n//@route    PUT api/contacts/:id\r\n//@desc     Update contact\r\n//@access   Private\r\nrouter.put('/:id', (req, res) => {\r\n  res.send('Update contacts');\r\n});\r\n\r\n//@route    DELETE api/contacts/:id\r\n//@desc     Delete contact\r\n//@access   Private\r\nrouter.delete('/:id', (req, res) => {\r\n  res.send('Delete contacts');\r\n});\r\n\r\nmodule.exports = router;\r\n"]},"metadata":{},"sourceType":"script"}