{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass CustomValidation {\n  constructor(validator, negated) {\n    this.validator = validator;\n    this.negated = negated;\n  }\n\n  run(context, value, meta) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const result = this.validator(value, meta);\n        const actualResult = yield result;\n        const isPromise = result && result.then;\n        const failed = this.negated ? actualResult : !actualResult; // A promise that was resolved only adds an error if negated.\n        // Otherwise it always suceeds\n\n        if (!isPromise && failed || isPromise && this.negated) {\n          context.addError(this.message, value, meta);\n        }\n      } catch (err) {\n        if (this.negated) {\n          return;\n        }\n\n        context.addError((err instanceof Error ? err.message : err) || this.message, value, meta);\n      }\n    });\n  }\n\n}\n\nexports.CustomValidation = CustomValidation;","map":{"version":3,"sources":["C:/Users/kevin/Documents/Web Development Projects/Contact-Keeper-/node_modules/express-validator/src/context-items/custom-validation.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","CustomValidation","constructor","validator","negated","run","context","meta","actualResult","isPromise","failed","addError","message","err","Error"],"mappings":"AAAA;;AACA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;AACrF,SAAO,KAAKD,CAAC,KAAKA,CAAC,GAAGE,OAAT,CAAN,EAAyB,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AACvD,aAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAE,UAAI;AAAEC,QAAAA,IAAI,CAACN,SAAS,CAACO,IAAV,CAAeF,KAAf,CAAD,CAAJ;AAA8B,OAApC,CAAqC,OAAOG,CAAP,EAAU;AAAEL,QAAAA,MAAM,CAACK,CAAD,CAAN;AAAY;AAAE;;AAC3F,aAASC,QAAT,CAAkBJ,KAAlB,EAAyB;AAAE,UAAI;AAAEC,QAAAA,IAAI,CAACN,SAAS,CAAC,OAAD,CAAT,CAAmBK,KAAnB,CAAD,CAAJ;AAAkC,OAAxC,CAAyC,OAAOG,CAAP,EAAU;AAAEL,QAAAA,MAAM,CAACK,CAAD,CAAN;AAAY;AAAE;;AAC9F,aAASF,IAAT,CAAcI,MAAd,EAAsB;AAAEA,MAAAA,MAAM,CAACC,IAAP,GAAcT,OAAO,CAACQ,MAAM,CAACL,KAAR,CAArB,GAAsC,IAAIN,CAAJ,CAAM,UAAUG,OAAV,EAAmB;AAAEA,QAAAA,OAAO,CAACQ,MAAM,CAACL,KAAR,CAAP;AAAwB,OAAnD,EAAqDO,IAArD,CAA0DR,SAA1D,EAAqEK,QAArE,CAAtC;AAAuH;;AAC/IH,IAAAA,IAAI,CAAC,CAACN,SAAS,GAAGA,SAAS,CAACa,KAAV,CAAgBhB,OAAhB,EAAyBC,UAAU,IAAI,EAAvC,CAAb,EAAyDS,IAAzD,EAAD,CAAJ;AACH,GALM,CAAP;AAMH,CAPD;;AAQAO,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEX,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMY,gBAAN,CAAuB;AACnBC,EAAAA,WAAW,CAACC,SAAD,EAAYC,OAAZ,EAAqB;AAC5B,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACH;;AACDC,EAAAA,GAAG,CAACC,OAAD,EAAUjB,KAAV,EAAiBkB,IAAjB,EAAuB;AACtB,WAAO3B,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,UAAI;AACA,cAAMc,MAAM,GAAG,KAAKS,SAAL,CAAed,KAAf,EAAsBkB,IAAtB,CAAf;AACA,cAAMC,YAAY,GAAG,MAAMd,MAA3B;AACA,cAAMe,SAAS,GAAGf,MAAM,IAAIA,MAAM,CAACE,IAAnC;AACA,cAAMc,MAAM,GAAG,KAAKN,OAAL,GAAeI,YAAf,GAA8B,CAACA,YAA9C,CAJA,CAKA;AACA;;AACA,YAAK,CAACC,SAAD,IAAcC,MAAf,IAA2BD,SAAS,IAAI,KAAKL,OAAjD,EAA2D;AACvDE,UAAAA,OAAO,CAACK,QAAR,CAAiB,KAAKC,OAAtB,EAA+BvB,KAA/B,EAAsCkB,IAAtC;AACH;AACJ,OAVD,CAWA,OAAOM,GAAP,EAAY;AACR,YAAI,KAAKT,OAAT,EAAkB;AACd;AACH;;AACDE,QAAAA,OAAO,CAACK,QAAR,CAAiB,CAACE,GAAG,YAAYC,KAAf,GAAuBD,GAAG,CAACD,OAA3B,GAAqCC,GAAtC,KAA8C,KAAKD,OAApE,EAA6EvB,KAA7E,EAAoFkB,IAApF;AACH;AACJ,KAlBe,CAAhB;AAmBH;;AAzBkB;;AA2BvBP,OAAO,CAACC,gBAAR,GAA2BA,gBAA3B","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass CustomValidation {\n    constructor(validator, negated) {\n        this.validator = validator;\n        this.negated = negated;\n    }\n    run(context, value, meta) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const result = this.validator(value, meta);\n                const actualResult = yield result;\n                const isPromise = result && result.then;\n                const failed = this.negated ? actualResult : !actualResult;\n                // A promise that was resolved only adds an error if negated.\n                // Otherwise it always suceeds\n                if ((!isPromise && failed) || (isPromise && this.negated)) {\n                    context.addError(this.message, value, meta);\n                }\n            }\n            catch (err) {\n                if (this.negated) {\n                    return;\n                }\n                context.addError((err instanceof Error ? err.message : err) || this.message, value, meta);\n            }\n        });\n    }\n}\nexports.CustomValidation = CustomValidation;\n"]},"metadata":{},"sourceType":"script"}