{"ast":null,"code":"const express = require(\"express\");\n\nconst router = express.Router();\n\nconst bcrypt = require(\"bcryptjs\");\n\nconst jwt = require(\"jsonwebtoken\");\n\nconst config = require(\"config\");\n\nconst {\n  check,\n  validationResult\n} = require(\"express-validator\");\n\nconst User = require(\"../models/User\"); //@route    Post api/users\n//@desc     Register a user\n//@access   Public\n\n\nrouter.post(\"/\", [check(\"name\", \"Please add name\").not().isEmpty(), check(\"email\", \"Please include valid email\").isEmail(), check(\"password\", \"please enter password with 6 or more characters\").isLength({\n  min: 6\n})], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  const {\n    name,\n    password,\n    email\n  } = req.body;\n\n  try {\n    let user = await User.findOne({\n      email\n    });\n\n    if (user) {\n      return res.status(400).json({\n        msg: \"User already exist\"\n      });\n    }\n\n    user = new User({\n      name,\n      email,\n      password\n    });\n    const salt = await bcrypt.genSalt(10);\n    user.password = await bcrypt.hash(password, salt);\n    await user.save();\n    const payload = {\n      user: {\n        id: user.id\n      }\n    };\n    jwt.sign(payload, config.get(\"jwtSecret\"), {\n      expiresIn: 360000\n    }, (err, token) => {\n      if (err) throw err;\n      res.json({\n        token\n      });\n    });\n  } catch (error) {\n    console.error(err.message);\n    res.status(500).send(\"Server Error\");\n  }\n});\nmodule.exports = router;","map":{"version":3,"sources":["C:/Users/kevin/Documents/Web Development Projects/Contact-Keeper-/routes/users.js"],"names":["express","require","router","Router","bcrypt","jwt","config","check","validationResult","User","post","not","isEmpty","isEmail","isLength","min","req","res","errors","status","json","array","name","password","email","body","user","findOne","msg","salt","genSalt","hash","save","payload","id","sign","get","expiresIn","err","token","error","console","message","send","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAR,EAAf;;AACA,MAAMC,MAAM,GAAGH,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMI,GAAG,GAAGJ,OAAO,CAAC,cAAD,CAAnB;;AACA,MAAMK,MAAM,GAAGL,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAM;AAAEM,EAAAA,KAAF;AAASC,EAAAA;AAAT,IAA8BP,OAAO,CAAC,mBAAD,CAA3C;;AAEA,MAAMQ,IAAI,GAAGR,OAAO,CAAC,gBAAD,CAApB,C,CAEA;AACA;AACA;;;AACAC,MAAM,CAACQ,IAAP,CACE,GADF,EAEE,CACEH,KAAK,CAAC,MAAD,EAAS,iBAAT,CAAL,CAAiCI,GAAjC,GAAuCC,OAAvC,EADF,EAEEL,KAAK,CAAC,OAAD,EAAU,4BAAV,CAAL,CAA6CM,OAA7C,EAFF,EAGEN,KAAK,CACH,UADG,EAEH,iDAFG,CAAL,CAGEO,QAHF,CAGW;AAAEC,EAAAA,GAAG,EAAE;AAAP,CAHX,CAHF,CAFF,EAWE,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAClB,QAAMC,MAAM,GAAGV,gBAAgB,CAACQ,GAAD,CAA/B;;AACA,MAAI,CAACE,MAAM,CAACN,OAAP,EAAL,EAAuB;AACrB,WAAOK,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEF,MAAAA,MAAM,EAAEA,MAAM,CAACG,KAAP;AAAV,KAArB,CAAP;AACD;;AAED,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA;AAAlB,MAA4BR,GAAG,CAACS,IAAtC;;AAEA,MAAI;AACF,QAAIC,IAAI,GAAG,MAAMjB,IAAI,CAACkB,OAAL,CAAa;AAAEH,MAAAA;AAAF,KAAb,CAAjB;;AAEA,QAAIE,IAAJ,EAAU;AACR,aAAOT,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEQ,QAAAA,GAAG,EAAE;AAAP,OAArB,CAAP;AACD;;AAEDF,IAAAA,IAAI,GAAG,IAAIjB,IAAJ,CAAS;AACda,MAAAA,IADc;AAEdE,MAAAA,KAFc;AAGdD,MAAAA;AAHc,KAAT,CAAP;AAMA,UAAMM,IAAI,GAAG,MAAMzB,MAAM,CAAC0B,OAAP,CAAe,EAAf,CAAnB;AAEAJ,IAAAA,IAAI,CAACH,QAAL,GAAgB,MAAMnB,MAAM,CAAC2B,IAAP,CAAYR,QAAZ,EAAsBM,IAAtB,CAAtB;AAEA,UAAMH,IAAI,CAACM,IAAL,EAAN;AAEA,UAAMC,OAAO,GAAG;AACdP,MAAAA,IAAI,EAAE;AACJQ,QAAAA,EAAE,EAAER,IAAI,CAACQ;AADL;AADQ,KAAhB;AAKA7B,IAAAA,GAAG,CAAC8B,IAAJ,CACEF,OADF,EAEE3B,MAAM,CAAC8B,GAAP,CAAW,WAAX,CAFF,EAGE;AACEC,MAAAA,SAAS,EAAE;AADb,KAHF,EAME,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACd,UAAID,GAAJ,EAAS,MAAMA,GAAN;AACTrB,MAAAA,GAAG,CAACG,IAAJ,CAAS;AAAEmB,QAAAA;AAAF,OAAT;AACD,KATH;AAWD,GAnCD,CAmCE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcF,GAAG,CAACI,OAAlB;AACAzB,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBwB,IAAhB,CAAqB,cAArB;AACD;AACF,CA1DH;AA6DAC,MAAM,CAACC,OAAP,GAAiB3C,MAAjB","sourcesContent":["const express = require(\"express\");\r\nconst router = express.Router();\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst config = require(\"config\");\r\nconst { check, validationResult } = require(\"express-validator\");\r\n\r\nconst User = require(\"../models/User\");\r\n\r\n//@route    Post api/users\r\n//@desc     Register a user\r\n//@access   Public\r\nrouter.post(\r\n  \"/\",\r\n  [\r\n    check(\"name\", \"Please add name\").not().isEmpty(),\r\n    check(\"email\", \"Please include valid email\").isEmail(),\r\n    check(\r\n      \"password\",\r\n      \"please enter password with 6 or more characters\"\r\n    ).isLength({ min: 6 }),\r\n  ],\r\n\r\n  async (req, res) => {\r\n    const errors = validationResult(req);\r\n    if (!errors.isEmpty()) {\r\n      return res.status(400).json({ errors: errors.array() });\r\n    }\r\n\r\n    const { name, password, email } = req.body;\r\n\r\n    try {\r\n      let user = await User.findOne({ email });\r\n\r\n      if (user) {\r\n        return res.status(400).json({ msg: \"User already exist\" });\r\n      }\r\n\r\n      user = new User({\r\n        name,\r\n        email,\r\n        password,\r\n      });\r\n\r\n      const salt = await bcrypt.genSalt(10);\r\n\r\n      user.password = await bcrypt.hash(password, salt);\r\n\r\n      await user.save();\r\n\r\n      const payload = {\r\n        user: {\r\n          id: user.id,\r\n        },\r\n      };\r\n      jwt.sign(\r\n        payload,\r\n        config.get(\"jwtSecret\"),\r\n        {\r\n          expiresIn: 360000,\r\n        },\r\n        (err, token) => {\r\n          if (err) throw err;\r\n          res.json({ token });\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.error(err.message);\r\n      res.status(500).send(\"Server Error\");\r\n    }\r\n  }\r\n);\r\n\r\nmodule.exports = router;\r\n"]},"metadata":{},"sourceType":"script"}