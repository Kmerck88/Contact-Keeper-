{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst base_1 = require(\"../base\");\n\nconst context_builder_1 = require(\"../context-builder\");\n\nfunction oneOf(chains, message) {\n  return (req, _res, next) => __awaiter(this, void 0, void 0, function* () {\n    const surrogateContext = new context_builder_1.ContextBuilder().build(); // Run each group of chains in parallel, and within each group, run each chain in parallel too.\n\n    const promises = chains.map(chain => __awaiter(this, void 0, void 0, function* () {\n      const group = Array.isArray(chain) ? chain : [chain];\n      const contexts = yield Promise.all(group.map(chain => chain.run(req, {\n        saveContext: false\n      })));\n\n      const groupErrors = _.flatMap(contexts, 'errors'); // #536: The data from a chain within oneOf() can only be made available to e.g. matchedData()\n      // if its entire group is valid.\n\n\n      if (!groupErrors.length) {\n        contexts.forEach(context => {\n          surrogateContext.addFieldInstances(context.getData());\n        });\n      }\n\n      return groupErrors;\n    }));\n    req[base_1.contextsKey] = (req[base_1.contextsKey] || []).concat(surrogateContext);\n\n    try {\n      const allErrors = yield Promise.all(promises);\n      const success = allErrors.some(groupErrors => groupErrors.length === 0);\n\n      if (!success) {\n        // Only add an error to the context if no group of chains had success.\n        surrogateContext.addError(typeof message === 'function' ? message({\n          req\n        }) : message || 'Invalid value(s)', _.flatMap(allErrors));\n      }\n\n      next();\n    } catch (e) {\n      next(e);\n    }\n  });\n}\n\nexports.oneOf = oneOf;","map":{"version":3,"sources":["C:/Users/kevin/Documents/Web Development Projects/Contact-Keeper-/node_modules/express-validator/src/middlewares/one-of.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","_","require","base_1","context_builder_1","oneOf","chains","message","req","_res","surrogateContext","ContextBuilder","build","promises","map","chain","group","Array","isArray","contexts","all","run","saveContext","groupErrors","flatMap","length","forEach","context","addFieldInstances","getData","contextsKey","concat","allErrors","success","some","addError"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst base_1 = require(\"../base\");\nconst context_builder_1 = require(\"../context-builder\");\nfunction oneOf(chains, message) {\n    return (req, _res, next) => __awaiter(this, void 0, void 0, function* () {\n        const surrogateContext = new context_builder_1.ContextBuilder().build();\n        // Run each group of chains in parallel, and within each group, run each chain in parallel too.\n        const promises = chains.map((chain) => __awaiter(this, void 0, void 0, function* () {\n            const group = Array.isArray(chain) ? chain : [chain];\n            const contexts = yield Promise.all(group.map(chain => chain.run(req, { saveContext: false })));\n            const groupErrors = _.flatMap(contexts, 'errors');\n            // #536: The data from a chain within oneOf() can only be made available to e.g. matchedData()\n            // if its entire group is valid.\n            if (!groupErrors.length) {\n                contexts.forEach(context => {\n                    surrogateContext.addFieldInstances(context.getData());\n                });\n            }\n            return groupErrors;\n        }));\n        req[base_1.contextsKey] = (req[base_1.contextsKey] || []).concat(surrogateContext);\n        try {\n            const allErrors = yield Promise.all(promises);\n            const success = allErrors.some(groupErrors => groupErrors.length === 0);\n            if (!success) {\n                // Only add an error to the context if no group of chains had success.\n                surrogateContext.addError(typeof message === 'function' ? message({ req }) : message || 'Invalid value(s)', _.flatMap(allErrors));\n            }\n            next();\n        }\n        catch (e) {\n            next(e);\n        }\n    });\n}\nexports.oneOf = oneOf;\n"]},"metadata":{},"sourceType":"script"}