{"ast":null,"code":"const express = require('express');\n\nconst router = express.Router();\n\nconst bcrypt = require('bcryptjs');\n\nconst jwt = require('jsonwebtoken');\n\nconst config = require('config');\n\nconst auth = require('../middleware/auth');\n\nconst {\n  check,\n  validationResult\n} = require('express-validator');\n\nconst User = require('../models/User'); //@route    GET api/auth\n//@desc     Get logged in user\n//@access   private\n\n\nrouter.get('/', auth, async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id).select('-password');\n    res.json(user);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); //@route    Post api/auth\n//@desc     Auth user & get token\n//@access   public\n\nrouter.post('/', [check('email', 'Please include a valid email').isEmail(), check('password', 'password is required').exists()], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  const {\n    email,\n    password\n  } = req.body;\n\n  try {\n    let user = await User.findOne({\n      email\n    });\n\n    if (!user) {\n      return res.status(400).json({\n        msg: 'Invalid Credentials'\n      });\n    }\n\n    const isMatch = await bcrypt.compare(password, user.password);\n\n    if (!isMatch) {\n      return res.status(400).json({\n        msg: 'Invalid Credentials'\n      });\n    }\n\n    const payload = {\n      user: {\n        id: user.id\n      }\n    };\n    jwt.sign(payload, config.get('jwtSecret'), {\n      expiresIn: 3600000\n    }, (err, token) => {\n      if (err) throw err;\n      res.json({\n        token\n      });\n    });\n  } catch (err) {\n    console.err(err.message);\n    res.status(500).send('server Error');\n  }\n});\nmodule.exports = router;","map":{"version":3,"sources":["C:/Users/kevin/Documents/Web Development Projects/Contact-Keeper-/routes/auth.js"],"names":["express","require","router","Router","bcrypt","jwt","config","auth","check","validationResult","User","get","req","res","user","findById","id","select","json","err","console","error","message","status","send","post","isEmail","exists","errors","isEmpty","array","email","password","body","findOne","msg","isMatch","compare","payload","sign","expiresIn","token","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst config = require('config');\r\nconst auth =require('../middleware/auth') \r\nconst { check, validationResult } = require('express-validator');\r\n\r\nconst User = require('../models/User');\r\n\r\n//@route    GET api/auth\r\n//@desc     Get logged in user\r\n//@access   private\r\nrouter.get('/', auth, async (req, res) => {\r\n try {\r\n   const user = await User.findById(req.user.id).select('-password'); \r\n   res.json(user);\r\n } catch (err) {\r\n   console.error(err.message); \r\n   res.status(500).send('Server Error');\r\n }\r\n});\r\n\r\n//@route    Post api/auth\r\n//@desc     Auth user & get token\r\n//@access   public\r\nrouter.post(\r\n  '/',\r\n  [\r\n    check('email', 'Please include a valid email').isEmail(),\r\n    check('password', 'password is required').exists()\r\n  ],\r\n  async (req, res) => {\r\n    const errors = validationResult(req);\r\n    if (!errors.isEmpty()) {\r\n      return res.status(400).json({ errors: errors.array() });\r\n    }\r\n\r\n    const { email, password } = req.body;\r\n\r\n    try {\r\n      let user = await User.findOne({ email });\r\n\r\n      if (!user) {\r\n        return res.status(400).json({ msg: 'Invalid Credentials' });\r\n      }\r\n\r\n      const isMatch = await bcrypt.compare(password, user.password);\r\n\r\n      if (!isMatch) {\r\n        return res.status(400).json({ msg: 'Invalid Credentials' });\r\n      }\r\n\r\n      const payload = {\r\n        user: {\r\n          id: user.id\r\n        }\r\n      };\r\n      jwt.sign(\r\n        payload,\r\n        config.get('jwtSecret'),\r\n        {\r\n          expiresIn: 3600000\r\n        },\r\n        (err, token) => {\r\n          if (err) throw err;\r\n          res.json({ token });\r\n        }\r\n      );\r\n    } catch (err) {\r\n      console.err(err.message);\r\n      res.status(500).send('server Error');\r\n    }\r\n  }\r\n);\r\n\r\nmodule.exports = router;\r\n"]},"metadata":{},"sourceType":"script"}