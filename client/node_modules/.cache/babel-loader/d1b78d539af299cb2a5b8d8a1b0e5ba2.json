{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst base_1 = require(\"./base\");\n\nconst utils_1 = require(\"./utils\"); // Assign to a variable so that TS doesn't use its catch all overload, which returns any\n\n\nconst withWithDefaults = {\n  withDefaults\n};\nexports.validationResult = Object.assign(withDefaults(), withWithDefaults);\n\nclass Result {\n  constructor(formatter, errors) {\n    this.formatter = formatter;\n    this.errors = errors;\n  }\n\n  array(options) {\n    return options && options.onlyFirstError ? Object.values(this.mapped()) : this.errors.map(this.formatter);\n  }\n\n  mapped() {\n    return this.errors.reduce((mapping, error) => {\n      if (!mapping[error.param]) {\n        mapping[error.param] = this.formatter(error);\n      }\n\n      return mapping;\n    }, {});\n  }\n\n  formatWith(formatter) {\n    return new Result(formatter, this.errors);\n  }\n\n  isEmpty() {\n    return this.errors.length === 0;\n  }\n\n  throw() {\n    if (!this.isEmpty()) {\n      throw Object.assign(new Error(), utils_1.bindAll(this));\n    }\n  }\n\n}\n\nexports.Result = Result;\n\nfunction withDefaults(options = {}) {\n  const defaults = {\n    formatter: error => error\n  };\n\n  const actualOptions = _.defaults(options, defaults);\n\n  return req => {\n    const contexts = req[base_1.contextsKey] || [];\n\n    const errors = _.flatMap(contexts, 'errors');\n\n    return new Result(actualOptions.formatter, errors);\n  };\n}","map":{"version":3,"sources":["C:/Users/kevin/Documents/Web Development Projects/Contact-Keeper-/node_modules/express-validator/src/validation-result.js"],"names":["Object","defineProperty","exports","value","_","require","base_1","utils_1","withWithDefaults","withDefaults","validationResult","assign","Result","constructor","formatter","errors","array","options","onlyFirstError","values","mapped","map","reduce","mapping","error","param","formatWith","isEmpty","length","throw","Error","bindAll","defaults","actualOptions","req","contexts","contextsKey","flatMap"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,SAAD,CAAvB,C,CACA;;;AACA,MAAMG,gBAAgB,GAAG;AAAEC,EAAAA;AAAF,CAAzB;AACAP,OAAO,CAACQ,gBAAR,GAA2BV,MAAM,CAACW,MAAP,CAAcF,YAAY,EAA1B,EAA8BD,gBAA9B,CAA3B;;AACA,MAAMI,MAAN,CAAa;AACTC,EAAAA,WAAW,CAACC,SAAD,EAAYC,MAAZ,EAAoB;AAC3B,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AACDC,EAAAA,KAAK,CAACC,OAAD,EAAU;AACX,WAAOA,OAAO,IAAIA,OAAO,CAACC,cAAnB,GACDlB,MAAM,CAACmB,MAAP,CAAc,KAAKC,MAAL,EAAd,CADC,GAED,KAAKL,MAAL,CAAYM,GAAZ,CAAgB,KAAKP,SAArB,CAFN;AAGH;;AACDM,EAAAA,MAAM,GAAG;AACL,WAAO,KAAKL,MAAL,CAAYO,MAAZ,CAAmB,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAC1C,UAAI,CAACD,OAAO,CAACC,KAAK,CAACC,KAAP,CAAZ,EAA2B;AACvBF,QAAAA,OAAO,CAACC,KAAK,CAACC,KAAP,CAAP,GAAuB,KAAKX,SAAL,CAAeU,KAAf,CAAvB;AACH;;AACD,aAAOD,OAAP;AACH,KALM,EAKJ,EALI,CAAP;AAMH;;AACDG,EAAAA,UAAU,CAACZ,SAAD,EAAY;AAClB,WAAO,IAAIF,MAAJ,CAAWE,SAAX,EAAsB,KAAKC,MAA3B,CAAP;AACH;;AACDY,EAAAA,OAAO,GAAG;AACN,WAAO,KAAKZ,MAAL,CAAYa,MAAZ,KAAuB,CAA9B;AACH;;AACDC,EAAAA,KAAK,GAAG;AACJ,QAAI,CAAC,KAAKF,OAAL,EAAL,EAAqB;AACjB,YAAM3B,MAAM,CAACW,MAAP,CAAc,IAAImB,KAAJ,EAAd,EAA2BvB,OAAO,CAACwB,OAAR,CAAgB,IAAhB,CAA3B,CAAN;AACH;AACJ;;AA5BQ;;AA8Bb7B,OAAO,CAACU,MAAR,GAAiBA,MAAjB;;AACA,SAASH,YAAT,CAAsBQ,OAAO,GAAG,EAAhC,EAAoC;AAChC,QAAMe,QAAQ,GAAG;AACblB,IAAAA,SAAS,EAAEU,KAAK,IAAIA;AADP,GAAjB;;AAGA,QAAMS,aAAa,GAAG7B,CAAC,CAAC4B,QAAF,CAAWf,OAAX,EAAoBe,QAApB,CAAtB;;AACA,SAAQE,GAAD,IAAS;AACZ,UAAMC,QAAQ,GAAGD,GAAG,CAAC5B,MAAM,CAAC8B,WAAR,CAAH,IAA2B,EAA5C;;AACA,UAAMrB,MAAM,GAAGX,CAAC,CAACiC,OAAF,CAAUF,QAAV,EAAoB,QAApB,CAAf;;AACA,WAAO,IAAIvB,MAAJ,CAAWqB,aAAa,CAACnB,SAAzB,EAAoCC,MAApC,CAAP;AACH,GAJD;AAKH","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst base_1 = require(\"./base\");\nconst utils_1 = require(\"./utils\");\n// Assign to a variable so that TS doesn't use its catch all overload, which returns any\nconst withWithDefaults = { withDefaults };\nexports.validationResult = Object.assign(withDefaults(), withWithDefaults);\nclass Result {\n    constructor(formatter, errors) {\n        this.formatter = formatter;\n        this.errors = errors;\n    }\n    array(options) {\n        return options && options.onlyFirstError\n            ? Object.values(this.mapped())\n            : this.errors.map(this.formatter);\n    }\n    mapped() {\n        return this.errors.reduce((mapping, error) => {\n            if (!mapping[error.param]) {\n                mapping[error.param] = this.formatter(error);\n            }\n            return mapping;\n        }, {});\n    }\n    formatWith(formatter) {\n        return new Result(formatter, this.errors);\n    }\n    isEmpty() {\n        return this.errors.length === 0;\n    }\n    throw() {\n        if (!this.isEmpty()) {\n            throw Object.assign(new Error(), utils_1.bindAll(this));\n        }\n    }\n}\nexports.Result = Result;\nfunction withDefaults(options = {}) {\n    const defaults = {\n        formatter: error => error,\n    };\n    const actualOptions = _.defaults(options, defaults);\n    return (req) => {\n        const contexts = req[base_1.contextsKey] || [];\n        const errors = _.flatMap(contexts, 'errors');\n        return new Result(actualOptions.formatter, errors);\n    };\n}\n"]},"metadata":{},"sourceType":"script"}