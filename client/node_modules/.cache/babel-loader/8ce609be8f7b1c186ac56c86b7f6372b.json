{"ast":null,"code":"import { ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER, CONTACT_ERROR, GET_CONTACTS, CLEAR_CONTACTS } from \"../types\";\nexport default ((state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return { ...state,\n        contacts: action.payload,\n        loading: false\n      };\n\n    case ADD_CONTACT:\n      return { ...state,\n        contacts: [action.payload, ...state.contacts],\n        loading: false\n      };\n\n    case UPDATE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.map(contact => contact.id === action.payload_id ? action.payload : contact),\n        loading: false\n      };\n\n    case DELETE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.filter(contact => contact._id !== action.payload),\n        loading: false\n      };\n\n    case CLEAR_CONTACTS:\n      return { ...state,\n        contacts: null,\n        filtered: null,\n        error: null,\n        current: null\n      };\n\n    case SET_CURRENT:\n      return { ...state,\n        current: action.payload\n      };\n\n    case CLEAR_CURRENT:\n      return { ...state,\n        current: null\n      };\n\n    case FILTER_CONTACTS:\n      return { ...state,\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, \"gi\");\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      };\n\n    case CLEAR_FILTER:\n      return { ...state,\n        filtered: null\n      };\n\n    case CONTACT_ERROR:\n      return { ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/Users/kevin/Documents/Web Development Projects/Contact-Keeper-/client/src/context/contact/contactReducer.js"],"names":["ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","GET_CONTACTS","CLEAR_CONTACTS","state","action","type","contacts","payload","loading","map","contact","id","payload_id","filter","_id","filtered","error","current","regex","RegExp","name","match","email"],"mappings":"AAAA,SACEA,WADF,EAEEC,cAFF,EAGEC,WAHF,EAIEC,aAJF,EAKEC,cALF,EAMEC,eANF,EAOEC,YAPF,EAQEC,aARF,EASEC,YATF,EAUEC,cAVF,QAWO,UAXP;AAaA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKJ,YAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELG,QAAAA,QAAQ,EAAEF,MAAM,CAACG,OAFZ;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKf,WAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELG,QAAAA,QAAQ,EAAE,CAACF,MAAM,CAACG,OAAR,EAAiB,GAAGJ,KAAK,CAACG,QAA1B,CAFL;AAGPE,QAAAA,OAAO,EAAE;AAHF,OAAP;;AAKF,SAAKX,cAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeG,GAAf,CAAmBC,OAAO,IAClCA,OAAO,CAACC,EAAR,KAAeP,MAAM,CAACQ,UAAtB,GAAmCR,MAAM,CAACG,OAA1C,GAAoDG,OAD5C,CAFL;AAKLF,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOF,SAAKd,cAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeO,MAAf,CACRH,OAAO,IAAIA,OAAO,CAACI,GAAR,KAAgBV,MAAM,CAACG,OAD1B,CAFL;AAIFC,QAAAA,OAAO,EAAE;AAJP,OAAP;;AAMA,SAAKN,cAAL;AACE,aAAO,EACL,GAAGC,KADE;AAELG,QAAAA,QAAQ,EAAE,IAFL;AAGLS,QAAAA,QAAQ,EAAE,IAHL;AAILC,QAAAA,KAAK,EAAE,IAJF;AAKLC,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAQJ,SAAKtB,WAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELc,QAAAA,OAAO,EAAEb,MAAM,CAACG;AAFX,OAAP;;AAIF,SAAKX,aAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELc,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAKF,SAAKnB,eAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELY,QAAAA,QAAQ,EAAEZ,KAAK,CAACG,QAAN,CAAeO,MAAf,CAAsBH,OAAO,IAAI;AACzC,gBAAMQ,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEf,MAAM,CAACG,OAAQ,EAA7B,EAAgC,IAAhC,CAAd;AACA,iBAAOG,OAAO,CAACU,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA6BR,OAAO,CAACY,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC;AACD,SAHS;AAFL,OAAP;;AAQF,SAAKnB,YAAL;AACE,aAAO,EACL,GAAGI,KADE;AAELY,QAAAA,QAAQ,EAAE;AAFL,OAAP;;AAKA,SAAKf,aAAL;AACA,aAAO,EACL,GAAGG,KADE;AAELa,QAAAA,KAAK,EAACZ,MAAM,CAACG;AAFR,OAAP;;AAIF;AACE,aAAOJ,KAAP;AArEJ;AAuED,CAxED","sourcesContent":["import {\r\n  ADD_CONTACT,\r\n  DELETE_CONTACT,\r\n  SET_CURRENT,\r\n  CLEAR_CURRENT,\r\n  UPDATE_CONTACT,\r\n  FILTER_CONTACTS,\r\n  CLEAR_FILTER,\r\n  CONTACT_ERROR,\r\n  GET_CONTACTS,\r\n  CLEAR_CONTACTS\r\n} from \"../types\";\r\n\r\nexport default (state, action) => {\r\n  switch (action.type) {\r\n    case GET_CONTACTS:\r\n      return {\r\n        ...state, \r\n        contacts: action.payload, \r\n        loading: false \r\n      }\r\n    case ADD_CONTACT:\r\n      return {\r\n        ...state,\r\n        contacts: [action.payload, ...state.contacts ], \r\n      loading: false, \r\n      };\r\n    case UPDATE_CONTACT:\r\n      return {\r\n        ...state,\r\n        contacts: state.contacts.map(contact =>\r\n          contact.id === action.payload_id ? action.payload : contact\r\n        ),\r\n        loading: false, \r\n      };\r\n    case DELETE_CONTACT:\r\n      return {\r\n        ...state,\r\n        contacts: state.contacts.filter(\r\n          contact => contact._id !== action.payload\r\n        ), loading: false \r\n      };\r\n      case CLEAR_CONTACTS:\r\n        return {\r\n          ...state, \r\n          contacts: null,\r\n          filtered: null,\r\n          error: null,\r\n          current: null\r\n\r\n        }\r\n    case SET_CURRENT:\r\n      return {\r\n        ...state,\r\n        current: action.payload\r\n      };\r\n    case CLEAR_CURRENT:\r\n      return {\r\n        ...state,\r\n        current: null\r\n      };\r\n\r\n    case FILTER_CONTACTS:\r\n      return {\r\n        ...state,\r\n        filtered: state.contacts.filter(contact => {\r\n          const regex = new RegExp(`${action.payload}`, \"gi\");\r\n          return contact.name.match(regex) || contact.email.match(regex);\r\n        })\r\n      };\r\n\r\n    case CLEAR_FILTER:\r\n      return {\r\n        ...state,\r\n        filtered: null\r\n      };\r\n\r\n      case CONTACT_ERROR: \r\n      return { \r\n        ...state, \r\n        error:action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}