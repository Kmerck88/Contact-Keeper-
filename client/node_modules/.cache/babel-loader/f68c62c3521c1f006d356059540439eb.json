{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst validator = require(\"validator\");\n\nconst sanitization_1 = require(\"../context-items/sanitization\");\n\nclass SanitizersImpl {\n  constructor(builder, chain) {\n    this.builder = builder;\n    this.chain = chain;\n  }\n\n  customSanitizer(sanitizer) {\n    this.builder.addItem(new sanitization_1.Sanitization(sanitizer, true));\n    return this.chain;\n  } // Standard sanitizers\n\n\n  addStandardSanitization(sanitizer, ...options) {\n    this.builder.addItem(new sanitization_1.Sanitization(sanitizer, false, options));\n    return this.chain;\n  }\n\n  blacklist(chars) {\n    return this.addStandardSanitization(validator.blacklist, chars);\n  }\n\n  escape() {\n    return this.addStandardSanitization(validator.escape);\n  }\n\n  unescape() {\n    return this.addStandardSanitization(validator.unescape);\n  }\n\n  ltrim(chars) {\n    return this.addStandardSanitization(validator.ltrim, chars);\n  }\n\n  normalizeEmail(options) {\n    return this.addStandardSanitization(validator.normalizeEmail, options);\n  }\n\n  rtrim(chars) {\n    return this.addStandardSanitization(validator.rtrim, chars);\n  }\n\n  stripLow(keep_new_lines) {\n    return this.addStandardSanitization(validator.stripLow, keep_new_lines);\n  }\n\n  toArray() {\n    return this.customSanitizer(value => value !== undefined && (Array.isArray(value) && value || [value]) || []);\n  }\n\n  toBoolean(strict) {\n    return this.addStandardSanitization(validator.toBoolean, strict);\n  }\n\n  toDate() {\n    return this.addStandardSanitization(validator.toDate);\n  }\n\n  toFloat() {\n    return this.addStandardSanitization(validator.toFloat);\n  }\n\n  toInt(radix) {\n    return this.addStandardSanitization(validator.toInt, radix);\n  }\n\n  trim(chars) {\n    return this.addStandardSanitization(validator.trim, chars);\n  }\n\n  whitelist(chars) {\n    return this.addStandardSanitization(validator.whitelist, chars);\n  }\n\n}\n\nexports.SanitizersImpl = SanitizersImpl;","map":{"version":3,"sources":["C:/Users/kevin/Documents/Web Development Projects/Contact-Keeper-/node_modules/express-validator/src/chain/sanitizers-impl.js"],"names":["Object","defineProperty","exports","value","validator","require","sanitization_1","SanitizersImpl","constructor","builder","chain","customSanitizer","sanitizer","addItem","Sanitization","addStandardSanitization","options","blacklist","chars","escape","unescape","ltrim","normalizeEmail","rtrim","stripLow","keep_new_lines","toArray","undefined","Array","isArray","toBoolean","strict","toDate","toFloat","toInt","radix","trim","whitelist"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst validator = require(\"validator\");\nconst sanitization_1 = require(\"../context-items/sanitization\");\nclass SanitizersImpl {\n    constructor(builder, chain) {\n        this.builder = builder;\n        this.chain = chain;\n    }\n    customSanitizer(sanitizer) {\n        this.builder.addItem(new sanitization_1.Sanitization(sanitizer, true));\n        return this.chain;\n    }\n    // Standard sanitizers\n    addStandardSanitization(sanitizer, ...options) {\n        this.builder.addItem(new sanitization_1.Sanitization(sanitizer, false, options));\n        return this.chain;\n    }\n    blacklist(chars) {\n        return this.addStandardSanitization(validator.blacklist, chars);\n    }\n    escape() {\n        return this.addStandardSanitization(validator.escape);\n    }\n    unescape() {\n        return this.addStandardSanitization(validator.unescape);\n    }\n    ltrim(chars) {\n        return this.addStandardSanitization(validator.ltrim, chars);\n    }\n    normalizeEmail(options) {\n        return this.addStandardSanitization(validator.normalizeEmail, options);\n    }\n    rtrim(chars) {\n        return this.addStandardSanitization(validator.rtrim, chars);\n    }\n    stripLow(keep_new_lines) {\n        return this.addStandardSanitization(validator.stripLow, keep_new_lines);\n    }\n    toArray() {\n        return this.customSanitizer(value => (value !== undefined && ((Array.isArray(value) && value) || [value])) || []);\n    }\n    toBoolean(strict) {\n        return this.addStandardSanitization(validator.toBoolean, strict);\n    }\n    toDate() {\n        return this.addStandardSanitization(validator.toDate);\n    }\n    toFloat() {\n        return this.addStandardSanitization(validator.toFloat);\n    }\n    toInt(radix) {\n        return this.addStandardSanitization(validator.toInt, radix);\n    }\n    trim(chars) {\n        return this.addStandardSanitization(validator.trim, chars);\n    }\n    whitelist(chars) {\n        return this.addStandardSanitization(validator.whitelist, chars);\n    }\n}\nexports.SanitizersImpl = SanitizersImpl;\n"]},"metadata":{},"sourceType":"script"}