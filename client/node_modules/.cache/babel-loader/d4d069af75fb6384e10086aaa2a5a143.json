{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst utils_1 = require(\"../utils\");\n\nclass Sanitization {\n  constructor(sanitizer, custom, options = []) {\n    this.sanitizer = sanitizer;\n    this.custom = custom;\n    this.options = options;\n  }\n\n  run(context, value, meta) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        req,\n        path,\n        location\n      } = meta;\n      const newValue = this.custom ? this.sanitizer(value, meta) : this.sanitizer(utils_1.toString(value), ...this.options);\n      context.setData(path, newValue, location); // Checks whether the value changed.\n      // Avoids e.g. undefined values being set on the request if it didn't have the key initially.\n\n      const reqValue = path !== '' ? _.get(req[location], path) : req[location];\n\n      if (reqValue !== newValue) {\n        path !== '' ? _.set(req[location], path, newValue) : _.set(req, location, newValue);\n      }\n    });\n  }\n\n}\n\nexports.Sanitization = Sanitization;","map":{"version":3,"sources":["C:/Users/kevin/Documents/Web Development Projects/Contact-Keeper-/node_modules/express-validator/src/context-items/sanitization.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","_","require","utils_1","Sanitization","constructor","sanitizer","custom","options","run","context","meta","req","path","location","newValue","toString","setData","reqValue","get","set"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst utils_1 = require(\"../utils\");\nclass Sanitization {\n    constructor(sanitizer, custom, options = []) {\n        this.sanitizer = sanitizer;\n        this.custom = custom;\n        this.options = options;\n    }\n    run(context, value, meta) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { req, path, location } = meta;\n            const newValue = this.custom\n                ? this.sanitizer(value, meta)\n                : this.sanitizer(utils_1.toString(value), ...this.options);\n            context.setData(path, newValue, location);\n            // Checks whether the value changed.\n            // Avoids e.g. undefined values being set on the request if it didn't have the key initially.\n            const reqValue = path !== '' ? _.get(req[location], path) : req[location];\n            if (reqValue !== newValue) {\n                path !== '' ? _.set(req[location], path, newValue) : _.set(req, location, newValue);\n            }\n        });\n    }\n}\nexports.Sanitization = Sanitization;\n"]},"metadata":{},"sourceType":"script"}