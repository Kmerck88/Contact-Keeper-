<<<<<<< HEAD
import { TSESTree, ParserServices } from '@typescript-eslint/typescript-estree';
=======
import { TSESTree, ParserServices } from '../ts-estree';
>>>>>>> 9fb8e1e8a00b9a1cf31203af027752dc1b545fc9
import { ParserOptions as TSParserOptions } from './ParserOptions';
import { RuleModule, RuleFix } from './Rule';
import { Scope } from './Scope';
import { SourceCode } from './SourceCode';
interface Linter {
    version: string;
    verify(code: SourceCode | string, config: Linter.Config, filename?: string): Linter.LintMessage[];
    verify(code: SourceCode | string, config: Linter.Config, options: Linter.LintOptions): Linter.LintMessage[];
    verifyAndFix(code: string, config: Linter.Config, filename?: string): Linter.FixReport;
    verifyAndFix(code: string, config: Linter.Config, options: Linter.FixOptions): Linter.FixReport;
    getSourceCode(): SourceCode;
    defineRule<TMessageIds extends string, TOptions extends readonly unknown[]>(name: string, rule: {
        meta?: RuleModule<TMessageIds, TOptions>['meta'];
        create: RuleModule<TMessageIds, TOptions>['create'];
    }): void;
    defineRules<TMessageIds extends string, TOptions extends readonly unknown[]>(rules: Record<string, RuleModule<TMessageIds, TOptions>>): void;
    getRules<TMessageIds extends string, TOptions extends readonly unknown[]>(): Map<string, RuleModule<TMessageIds, TOptions>>;
    defineParser(name: string, parser: Linter.ParserModule): void;
}
declare namespace Linter {
<<<<<<< HEAD
    type Severity = 0 | 1 | 2;
    type RuleLevel = Severity | 'off' | 'warn' | 'error';
    type RuleLevelAndOptions = [RuleLevel, ...unknown[]];
    interface Config {
        rules?: {
            [name: string]: RuleLevel | RuleLevelAndOptions;
        };
        parser?: string;
        parserOptions?: ParserOptions;
        settings?: {
            [name: string]: unknown;
        };
        env?: {
            [name: string]: boolean;
        };
        globals?: {
            [name: string]: boolean;
        };
    }
    type ParserOptions = TSParserOptions;
    interface LintOptions {
=======
    export type Severity = 0 | 1 | 2;
    export type RuleLevel = Severity | 'off' | 'warn' | 'error';
    export type RuleLevelAndOptions = [RuleLevel, ...unknown[]];
    export type RuleEntry = RuleLevel | RuleLevelAndOptions;
    export type RulesRecord = Partial<Record<string, RuleEntry>>;
    interface BaseConfig {
        $schema?: string;
        env?: {
            [name: string]: boolean;
        };
        extends?: string | string[];
        globals?: {
            [name: string]: boolean;
        };
        noInlineConfig?: boolean;
        overrides?: ConfigOverride[];
        parser?: string;
        parserOptions?: ParserOptions;
        plugins?: string[];
        processor?: string;
        reportUnusedDisableDirectives?: boolean;
        settings?: {
            [name: string]: unknown;
        };
        rules?: RulesRecord;
    }
    export interface ConfigOverride extends BaseConfig {
        excludedFiles?: string | string[];
        files: string | string[];
    }
    export type RuleOverride = ConfigOverride;
    export interface Config extends BaseConfig {
        ignorePatterns?: string | string[];
        root?: boolean;
    }
    export type ParserOptions = TSParserOptions;
    export interface LintOptions {
>>>>>>> 9fb8e1e8a00b9a1cf31203af027752dc1b545fc9
        filename?: string;
        preprocess?: (code: string) => string[];
        postprocess?: (problemLists: LintMessage[][]) => LintMessage[];
        allowInlineConfig?: boolean;
        reportUnusedDisableDirectives?: boolean;
    }
<<<<<<< HEAD
    interface LintMessage {
=======
    export interface LintSuggestion {
        desc: string;
        fix: RuleFix;
        messageId?: string;
    }
    export interface LintMessage {
>>>>>>> 9fb8e1e8a00b9a1cf31203af027752dc1b545fc9
        column: number;
        line: number;
        endColumn?: number;
        endLine?: number;
        ruleId: string | null;
        message: string;
<<<<<<< HEAD
=======
        messageId?: string;
>>>>>>> 9fb8e1e8a00b9a1cf31203af027752dc1b545fc9
        nodeType: string;
        fatal?: true;
        severity: Severity;
        fix?: RuleFix;
        source: string | null;
<<<<<<< HEAD
    }
    interface FixOptions extends LintOptions {
        fix?: boolean;
    }
    interface FixReport {
=======
        suggestions?: LintSuggestion[];
    }
    export interface FixOptions extends LintOptions {
        fix?: boolean;
    }
    export interface FixReport {
>>>>>>> 9fb8e1e8a00b9a1cf31203af027752dc1b545fc9
        fixed: boolean;
        output: string;
        messages: LintMessage[];
    }
<<<<<<< HEAD
    type ParserModule = {
=======
    export type ParserModule = {
>>>>>>> 9fb8e1e8a00b9a1cf31203af027752dc1b545fc9
        parse(text: string, options?: unknown): TSESTree.Program;
    } | {
        parseForESLint(text: string, options?: unknown): ESLintParseResult;
    };
<<<<<<< HEAD
    interface ESLintParseResult {
=======
    export interface ESLintParseResult {
>>>>>>> 9fb8e1e8a00b9a1cf31203af027752dc1b545fc9
        ast: TSESTree.Program;
        parserServices?: ParserServices;
        scopeManager?: Scope.ScopeManager;
        visitorKeys?: SourceCode.VisitorKeys;
    }
<<<<<<< HEAD
=======
    export {};
>>>>>>> 9fb8e1e8a00b9a1cf31203af027752dc1b545fc9
}
declare const Linter: new () => Linter;
export { Linter };
//# sourceMappingURL=Linter.d.ts.map